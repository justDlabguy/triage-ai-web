{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\r\n\r\n// Define protected routes that require authentication\r\nconst protectedRoutes = ['/dashboard', '/triage', '/clinics', '/profile']\r\n\r\n// Define public routes that don't require authentication\r\nconst publicRoutes = ['/login', '/register', '/']\r\n\r\nexport function middleware(request: NextRequest) {\r\n    const { pathname } = request.nextUrl\r\n\r\n    // Get the token from cookies\r\n    const token = request.cookies.get('access_token')?.value\r\n\r\n    // Check if the current path is protected\r\n    const isProtectedRoute = protectedRoutes.some(route =>\r\n        pathname.startsWith(route)\r\n    )\r\n\r\n    // Check if the current path is public\r\n    const isPublicRoute = publicRoutes.some(route =>\r\n        pathname === route || pathname.startsWith(route)\r\n    )\r\n\r\n    // If accessing a protected route without a token, redirect to login\r\n    if (isProtectedRoute && !token) {\r\n        const loginUrl = new URL('/login', request.url)\r\n        // Add the attempted URL as a redirect parameter\r\n        loginUrl.searchParams.set('redirect', pathname)\r\n        return NextResponse.redirect(loginUrl)\r\n    }\r\n\r\n    // If accessing login page with a valid token, redirect to dashboard\r\n    if (pathname === '/login' && token) {\r\n        return NextResponse.redirect(new URL('/dashboard', request.url))\r\n    }\r\n\r\n    // If accessing root with a valid token, redirect to dashboard\r\n    if (pathname === '/' && token) {\r\n        return NextResponse.redirect(new URL('/dashboard', request.url))\r\n    }\r\n\r\n    // If accessing root without token, redirect to login\r\n    if (pathname === '/' && !token) {\r\n        return NextResponse.redirect(new URL('/login', request.url))\r\n    }\r\n\r\n    // Allow the request to continue\r\n    return NextResponse.next()\r\n}\r\n\r\n// Configure which paths the middleware should run on\r\nexport const config = {\r\n    matcher: [\r\n        /*\r\n         * Match all request paths except for the ones starting with:\r\n         * - api (API routes)\r\n         * - _next/static (static files)\r\n         * - _next/image (image optimization files)\r\n         * - favicon.ico (favicon file)\r\n         * - public folder files\r\n         */\r\n        '/((?!api|_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\r\n    ],\r\n}"],"names":[],"mappings":";;;;;;AAAA;AAAA;;AAEA,sDAAsD;AACtD,MAAM,kBAAkB;IAAC;IAAc;IAAW;IAAY;CAAW;AAEzE,yDAAyD;AACzD,MAAM,eAAe;IAAC;IAAU;IAAa;CAAI;AAE1C,SAAS,WAAW,OAAoB;IAC3C,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IAEpC,6BAA6B;IAC7B,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,iBAAiB;IAEnD,yCAAyC;IACzC,MAAM,mBAAmB,gBAAgB,IAAI,CAAC,CAAA,QAC1C,SAAS,UAAU,CAAC;IAGxB,sCAAsC;IACtC,MAAM,gBAAgB,aAAa,IAAI,CAAC,CAAA,QACpC,aAAa,SAAS,SAAS,UAAU,CAAC;IAG9C,oEAAoE;IACpE,IAAI,oBAAoB,CAAC,OAAO;QAC5B,MAAM,WAAW,IAAI,IAAI,UAAU,QAAQ,GAAG;QAC9C,gDAAgD;QAChD,SAAS,YAAY,CAAC,GAAG,CAAC,YAAY;QACtC,OAAO,gMAAY,CAAC,QAAQ,CAAC;IACjC;IAEA,oEAAoE;IACpE,IAAI,aAAa,YAAY,OAAO;QAChC,OAAO,gMAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,QAAQ,GAAG;IAClE;IAEA,8DAA8D;IAC9D,IAAI,aAAa,OAAO,OAAO;QAC3B,OAAO,gMAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,QAAQ,GAAG;IAClE;IAEA,qDAAqD;IACrD,IAAI,aAAa,OAAO,CAAC,OAAO;QAC5B,OAAO,gMAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,GAAG;IAC9D;IAEA,gCAAgC;IAChC,OAAO,gMAAY,CAAC,IAAI;AAC5B;AAGO,MAAM,SAAS;IAClB,SAAS;QACL;;;;;;;SAOC,GACD;KACH;AACL"}}]
}